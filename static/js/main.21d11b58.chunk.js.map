{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","auth","firestore","functions","storage","console","log","name","App","_useState","useState","_useState2","Object","slicedToArray","user","setUser","onAuthStateChanged","react_default","a","createElement","className","JSON","stringify","onClick","httpsCallable","callable","text","subject","then","signOut","signOutUI","signInWithPopup","GoogleAuthProvider","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6OAiBAA,IAASC,cAXM,CACXC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,GACfC,kBAAmB,eACnBC,MAAO,wCAMJ,IAAMC,EAAMT,IAASS,MAEfC,GADKV,IAASW,YACPX,IAASU,QAEhBE,GADUZ,IAASa,UACPb,IAASY,aAElCE,QAAQC,IAAMN,EAAIO,KAAO,2BAA6B,2BCqBvCC,MAxCf,WAAe,IAAAC,EAEWC,mBAAS,MAFpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAENK,EAFMH,EAAA,GAEAI,EAFAJ,EAAA,GAMb,OAFAV,EAAKe,mBAAmBD,GAGtBE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,qDACCL,EAaP,SAAmBA,GACjB,OACEG,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,SAAKE,KAAKC,UAAUR,IAEpBG,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAMJpB,EAAUqB,cAAc,eAClCC,CAAS,CAAEC,KAAM,gDAAiDC,QAAS,qBAAqBC,KAAKvB,QAAQC,OAPhH,qCACAW,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAMtB,EAAK4B,YAA5B,YAtBQC,CAAUhB,GAOpBG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAMtB,EAAK8B,gBAAgB,IAAIxC,OAAcyC,sBAA9D,yBCXcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,KAAK,SAAAkB,GACjCA,EAAaC","file":"static/js/main.21d11b58.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport 'firebase/storage';\r\nimport 'firebase/functions';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyDhS8sMcPLi36PLAnlOt9yhiVJIPT3cEYc\",\r\n    authDomain: \"cloud-functions-fb384.firebaseapp.com\",\r\n    databaseURL: \"https://cloud-functions-fb384.firebaseio.com\",\r\n    projectId: \"cloud-functions-fb384\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"351413168193\",\r\n    appId: \"1:351413168193:web:3da14d14f52cd12c\"\r\n\r\n}\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const app = firebase.app();\r\nexport const db = firebase.firestore();\r\nexport const auth = firebase.auth();\r\nexport const storage = firebase.storage();\r\nexport const functions = firebase.functions();\r\n\r\nconsole.log(!!app.name ? 'Firebase Mode Activated!' : 'Firebase not working :(')","import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nimport * as firebase from 'firebase/app';\r\nimport { auth, functions } from './firebase';\r\n\r\nfunction App() {\r\n\r\n  const [user, setUser] = useState(null);\r\n\r\n  auth.onAuthStateChanged(setUser);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h2>SendGrid Transactional Email with React</h2>\r\n      {user ? signOutUI(user) : signInUI() }\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction signInUI() {\r\n  return (\r\n    <div>\r\n      <button onClick={() => auth.signInWithPopup(new firebase.auth.GoogleAuthProvider())}>SignIn with Google</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction signOutUI(user) {\r\n  return (\r\n    <div>\r\n      \r\n      <p>{ JSON.stringify(user) }</p>\r\n\r\n      <hr />\r\n\r\n      <button onClick={() => sendEmail()}>Send Email with Callable Function</button>\r\n      <button onClick={() => auth.signOut()}>SignOut</button>\r\n    </div>\r\n  )\r\n}\r\nfunction sendEmail() {\r\n  const callable = functions.httpsCallable('genericEmail');\r\n  return callable({ text: 'Sending email with React and SendGrid is fun!', subject: 'Email from React'}).then(console.log)\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}